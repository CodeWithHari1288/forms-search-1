import { NextRequest } from "next/server";
import { CopilotRuntime, copilotRuntimeNodeHttpEndpoint } from "@copilotkit/runtime";

// Create the runtime
const runtime = new CopilotRuntime({
  system:
    "For every user message, call tool `ask_python` with {input, messages} " +
    "and then reply with the tool's returned text verbatim.",
});

// ---- Safe registration (works across 1.10.x variants) ----
const register =
  // prefer the actions registry if present
  (runtime as any).actions?.register?.bind((runtime as any).actions) ||
  // else fall back to registerAction if present
  (runtime as any).registerAction?.bind(runtime) ||
  // else throw a clear error
  (() => {
    throw new Error("No action registration method found on CopilotRuntime.");
  });

// Tool: forwards the conversation to your Python API, returns plain text
register({
  name: "ask_python",
  description: "Send the conversation to the Python API and return its answer as text.",
  parameters: {
    type: "object",
    properties: {
      input: { type: "string", description: "Latest user message" },
      messages: { type: "array", items: { type: "object" }, description: "Full chat transcript" },
    },
    required: ["input", "messages"],
  },
  handler: async ({ input, messages }: { input: string; messages: any[] }) => {
    const PY_API = process.env.PY_API_URL ?? "http://localhost:8000/copilot";
    const res = await fetch(PY_API, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        input,
        variables: { data: { messages } }, // include transcript for context
      }),
    });

    const data = await res.json().catch(() => ({}));
    // MUST return a string so CopilotPopup prints it automatically
    return (
      data?.answer ||
      data?.user_text ||
      (typeof data === "string" ? data : JSON.stringify(data))
    );
  },
});

// Hook runtime into Next.js (no adapter needed in your version)
const handler = copilotRuntimeNodeHttpEndpoint({ runtime });

export function GET(req: NextRequest) {
  return handler(req);
}
export function POST(req: NextRequest) {
  return handler(req);
}