{
  "name": "subapp-with-copilotkit",
  "private": true,
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "@copilotkit/react-core": "^1.8.12",
    "@copilotkit/react-ui": "^1.8.12"
  },
  "devDependencies": {
    "rollup": "^4.21.0",
    "@rollup/plugin-node-resolve": "^15.2.3",
    "@rollup/plugin-commonjs": "^25.0.7",
    "@rollup/plugin-babel": "^6.0.4",
    "@babel/core": "^7.25.0",
    "@babel/preset-env": "^7.25.0",
    "@babel/preset-react": "^7.24.7"
  },
  "scripts": {
    "build": "rollup -c"
  }
}





import resolve from "@rollup/plugin-node-resolve";
import commonjs from "@rollup/plugin-commonjs";
import babel from "@rollup/plugin-babel";

export default {
  input: "src/entry-umd.jsx",
  output: {
    file: "dist/subapp.umd.js",
    format: "umd",
    name: "SubApp", // exposed as window.SubApp
    sourcemap: true
  },
  external: [],
  plugins: [
    resolve({ browser: true }),
    commonjs(),
    babel({
      babelHelpers: "bundled",
      presets: [
        ["@babel/preset-env", { targets: ">0.25%, not dead" }],
        ["@babel/preset-react", { runtime: "automatic" }]
      ]
    })
  ]
};




import React from "react";
import { CopilotKitProvider } from "@copilotkit/react-core";
import { CopilotChat } from "@copilotkit/react-ui";

export default function App({ runtimeUrl = "http://localhost:8000/copilot" }) {
  return (
    <CopilotKitProvider runtimeUrl={runtimeUrl}>
      <div style={{ height: "100%", display: "flex", flexDirection: "column" }}>
        <header style={{ padding: "8px", borderBottom: "1px solid #ddd", background: "#fff" }}>
          <strong>Copilot Sub-App</strong>
        </header>
        <main style={{ flex: 1, padding: "8px" }}>
          <CopilotChat placeholder="Ask me anything..." />
        </main>
      </div>
    </CopilotKitProvider>
  );
}



import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";

export function mount(el, opts = {}) {
  const { runtimeUrl } = opts;

  const container = document.createElement("div");
  el.appendChild(container);

  const root = createRoot(container);
  root.render(<App runtimeUrl={runtimeUrl} />);

  return () => {
    root.unmount();
    if (container.parentNode) container.parentNode.removeChild(container);
  };
}




import React, { useEffect, useRef, useState } from "react";

function loadScriptOnce(src) {
  return new Promise((resolve, reject) => {
    if (document.querySelector(`script[src="${src}"]`)) return resolve();
    const s = document.createElement("script");
    s.src = src;
    s.async = true;
    s.onload = resolve;
    s.onerror = reject;
    document.head.appendChild(s);
  });
}

export default function SubappShadow({ height = 600, runtimeUrl }) {
  const hostRef = useRef(null);
  const [error, setError] = useState("");

  useEffect(() => {
    let unmount;
    let shadow;

    (async () => {
      try {
        if (!hostRef.current) return;
        shadow = hostRef.current.attachShadow({ mode: "open" });

        const src = `${process.env.PUBLIC_URL}/subapp/subapp.umd.js`;
        await loadScriptOnce(src);

        if (!window.SubApp?.mount) throw new Error("SubApp.mount not found");
        unmount = window.SubApp.mount(shadow, { runtimeUrl });
      } catch (e) {
        setError(e.message);
      }
    })();

    return () => unmount?.();
  }, [runtimeUrl]);

  return (
    <div
      ref={hostRef}
      style={{ width: "100%", height, border: "1px solid #ddd", borderRadius: 8 }}
    >
      {error && <div style={{ color: "red", padding: 8 }}>Error: {error}</div>}
    </div>
  );
}




import React from "react";
import SubappShadow from "./SubappShadow";

export default function App() {
  return (
    <div style={{ padding: 24 }}>
      <h1>Main App (React 14)</h1>
      <SubappShadow runtimeUrl="http://localhost:8000/copilot" height={700} />
    </div>
  );
}



import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";

createRoot(document.getElementById("root")).render(<App />);






import React, { useEffect, useRef, useState } from "react";

// ✅ helper to load the subapp UMD bundle only once
function loadScriptOnce(src) {
  return new Promise((resolve, reject) => {
    const existing = document.querySelector(`script[src="${src}"]`);
    if (existing) {
      if (existing.dataset.ready === "1") return resolve(); // already loaded
      existing.addEventListener("load", () => resolve());
      existing.addEventListener("error", (e) => reject(e));
      return;
    }
    const s = document.createElement("script");
    s.src = src;
    s.async = true;
    s.onload = () => {
      s.dataset.ready = "1";
      resolve();
    };
    s.onerror = (e) => reject(e);
    document.head.appendChild(s);
  });
}

export default function SubappShadow({
  height = 720,
  runtimeUrl = "http://localhost:8000/copilot"
}) {
  const hostRef = useRef(null);
  const [error, setError] = useState("");

  useEffect(() => {
    let unmount;
    let shadow;

    (async () => {
      try {
        if (!hostRef.current) return;
        shadow = hostRef.current.attachShadow({ mode: "open" });

        // load the subapp UMD bundle
        const src = `/subapp/subapp.umd.js`; // or `${process.env.PUBLIC_URL}/subapp/subapp.umd.js`
        await loadScriptOnce(src);

        if (!window.SubApp?.mount) {
          throw new Error("window.SubApp.mount not found – UMD bundle not loaded?");
        }

        // mount the sub-app inside the shadow root
        unmount = window.SubApp.mount(shadow, { runtimeUrl });
      } catch (e) {
        setError(e.message || String(e));
      }
    })();

    return () => unmount?.();
  }, [runtimeUrl]);

  return (
    <div
      ref={hostRef}
      style={{
        width: "100%",
        height,
        border: "1px solid #ddd",
        borderRadius: 8,
        overflow: "hidden",
        background: "#fff"
      }}
    >
      {error && <div style={{ color: "red", padding: 8 }}>Error: {error}</div>}
    </div>
  );
}




import React, { useEffect, useRef, useState } from "react";

// Load the subapp UMD bundle once via <script>
function loadScriptOnce(src) {
  return new Promise((resolve, reject) => {
    const existing = document.querySelector(`script[src="${src}"]`);
    if (existing) {
      if (existing.dataset.ready === "1") return resolve();
      existing.addEventListener("load", () => resolve());
      existing.addEventListener("error", reject);
      return;
    }
    const s = document.createElement("script");
    s.src = src;
    s.async = true;
    s.addEventListener("load", () => { s.dataset.ready = "1"; resolve(); });
    s.addEventListener("error", reject);
    document.head.appendChild(s);
  });
}

/**
 * Bottom-right floating container that hosts the sub-app in a ShadowRoot.
 * We DON'T inject styles inside shadow; CopilotKit keeps its own defaults.
 */
export default function SubappShadowFloating({
  runtimeUrl = "http://localhost:8000/copilot",
  defaultOpen = true,
  width = 420,
  height = 600,
}) {
  const hostRef = useRef(null);
  const [open, setOpen] = useState(defaultOpen);
  const [mountedOnce, setMountedOnce] = useState(false);
  const [error, setError] = useState("");

  useEffect(() => {
    if (!open || mountedOnce) return;
    let unmount;
    (async () => {
      try {
        if (!hostRef.current) return;

        // 1) Create ShadowRoot on the floating host
        const shadow = hostRef.current.attachShadow({ mode: "open" });

        // 2) Load the UMD bundle the main app serves from /public/subapp
        const src = `/subapp/subapp.umd.js`; // or `${process.env.PUBLIC_URL}/subapp/subapp.umd.js`
        await loadScriptOnce(src);

        if (!window.SubApp?.mount) throw new Error("window.SubApp.mount not found");

        // 3) Mount the sub-app directly into the ShadowRoot
        unmount = window.SubApp.mount(shadow, { runtimeUrl });
        setMountedOnce(true);
      } catch (e) {
        setError(e?.message || String(e));
      }
    })();

    return () => { try { unmount?.(); } catch {} };
  }, [open, mountedOnce, runtimeUrl]);

  return (
    <>
      {/* Toggle button */}
      <button
        onClick={() => setOpen(v => !v)}
        style={{
          position: "fixed",
          right: 20,
          bottom: open ? height + 32 : 20,
          zIndex: 2147483647,
          border: "1px solid #e5e7eb",
          background: "#111827",
          color: "#fff",
          padding: "10px 14px",
          borderRadius: 999,
          boxShadow: "0 6px 24px rgba(0,0,0,0.15)",
          cursor: "pointer",
          fontFamily: "system-ui, sans-serif",
        }}
        aria-expanded={open}
        aria-controls="subapp-chat-widget"
      >
        {open ? "Hide Copilot" : "Open Copilot"}
      </button>

      {/* Floating host that holds the ShadowRoot (no inner styles) */}
      <div
        id="subapp-chat-widget"
        ref={hostRef}
        style={{
          position: "fixed",
          right: 20,
          bottom: 20,
          width,
          height,
          border: "1px solid #e5e7eb",
          borderRadius: 14,
          overflow: "hidden",
          background: "#fff",
          boxShadow: "0 16px 48px rgba(0,0,0,0.18)",
          zIndex: 2147483646,
          transition: "transform 160ms ease, opacity 160ms ease",
          transform: open ? "translateY(0)" : "translateY(12px)",
          opacity: open ? 1 : 0,
          pointerEvents: open ? "auto" : "none",
        }}
      />

      {/* Visible error (outside shadow) */}
      {error && (
        <div
          style={{
            position: "fixed",
            right: 20,
            bottom: height + 64,
            zIndex: 2147483647,
            background: "#fee2e2",
            color: "#991b1b",
            padding: "8px 12px",
            border: "1px solid #fecaca",
            borderRadius: 10,
            fontFamily: "system-ui, sans-serif"
          }}
        >
          Subapp error: {error}
        </div>
      )}
    </>
  );
}