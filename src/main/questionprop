import java.nio.file.*;
import java.io.IOException;
import java.util.regex.*;
import java.util.*;

public class ExtractLabelProp {
    public static void main(String[] args) throws IOException {
        // USAGE: java ExtractLabelProp [inputFile] [outputFile]
        Path in  = Paths.get(args.length > 0 ? args[0] : "input.txt");
        Path out = Paths.get(args.length > 1 ? args[1] : "output.txt");

        String text = new String(Files.readAllBytes(in), "UTF-8");

        // Match: export const <key> = { ... }
        Pattern block = Pattern.compile(
            "export\\s+const\\s+[A-Za-z0-9_$]+\\s*=\\s*\\{(.*?)\\}",
            Pattern.CASE_INSENSITIVE | Pattern.DOTALL
        );

        // Inside each block, find Label: "..."   and Prop: "..."
        // Handles single/double quotes and whitespace/newlines.
        Pattern pLabel = Pattern.compile("\\bLabel\\b\\s*:\\s*(['\"])(.*?)\\1",
                Pattern.CASE_INSENSITIVE | Pattern.DOTALL);
        Pattern pProp  = Pattern.compile("\\bProp\\b\\s*:\\s*(['\"])(.*?)\\1",
                Pattern.CASE_INSENSITIVE | Pattern.DOTALL);

        Matcher m = block.matcher(text);
        List<String> lines = new ArrayList<>();
        int count = 0;

        while (m.find()) {
            String body = m.group(1);

            String label = matchFirst(pLabel, body);
            String prop  = matchFirst(pProp,  body);

            if (label != null && prop != null) {
                lines.add("Label: " + label + " | Prop: " + prop);
                count++;
            }
        }

        Files.write(out, lines, StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);
        System.out.println("Extracted " + count + " entries -> " + out.toAbsolutePath());
    }

    private static String matchFirst(Pattern p, String s) {
        Matcher m = p.matcher(s);
        if (m.find()) return m.group(2).trim();
        return null;
    }
}