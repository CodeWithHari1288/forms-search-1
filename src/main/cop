// ChatDock.jsx
import { useEffect, useMemo, useRef, useState } from "react";
import { createPortal } from "react-dom";

const CHILD_ORIGIN = "http://localhost:3001"; // Next sub-app
const CHILD_PATH   = "/embed/popup";          // chat-only popup route

export default function ChatDock() {
  const [host, setHost] = useState(null);
  const iframeRef = useRef(null);

  // Create a detached host element once, appended to <body>
  useEffect(() => {
    const el = document.createElement("div");
    // Inline, scoped styles; do NOT touch your main page CSS
    Object.assign(el.style, {
      position: "fixed",
      right: "16px",
      bottom: "16px",
      width: "56px",
      height: "56px",
      borderRadius: "50%",
      zIndex: "2147483647",
      pointerEvents: "auto",
    });
    document.body.appendChild(el);
    setHost(el);
    return () => {
      document.body.removeChild(el);
    };
  }, []);

  // Listen for size updates from the sub-app and resize ONLY this dock
  useEffect(() => {
    const onMsg = (e) => {
      if (e.origin !== CHILD_ORIGIN) return;
      const { type, w, h } = e.data || {};
      if (type === "chat:size" && host) {
        Object.assign(host.style, {
          width:  `${w}px`,
          height: `${h}px`,
          borderRadius: w === 56 ? "50%" : "12px",
          boxShadow: w === 56 ? "none" : "0 8px 24px rgba(0,0,0,.18)",
          background: "transparent",
        });
      }
    };
    window.addEventListener("message", onMsg);
    return () => window.removeEventListener("message", onMsg);
  }, [host]);

  if (!host) return null;

  return createPortal(
    <iframe
      ref={iframeRef}
      title="CopilotPopup"
      src={`${CHILD_ORIGIN}${CHILD_PATH}`}
      style={{
        width: "100%",
        height: "100%",
        border: 0,
        background: "transparent",
        borderRadius: "inherit",
      }}
      allow="clipboard-read; clipboard-write"
      referrerPolicy="no-referrer-when-downgrade"
    />,
    host
  );
}




// In your page component
// ...
<main>
  {/* your existing content */}
  <div id="copilot-slot">
    <ChatDock /> {/* ‚Üê add this; no style changes elsewhere */}
  </div>
</main>
<footer>...</footer>





// subapp-next/app/embed/popup/page.tsx
"use client";
import { useState, useEffect } from "react";
import { CopilotKit } from "@copilotkit/react-core";
import { CopilotPopup } from "@copilotkit/react-ui";
import "@copilotkit/react-ui/styles.css";

const PARENT_ORIGIN = "http://localhost:3000"; // main app origin

export default function ChatPopup() {
  const [open, setOpen] = useState(false);

  // Tell parent how big to make the iframe
  useEffect(() => {
    const payload = open
      ? { type: "chat:size", w: 420, h: 560 }
      : { type: "chat:size", w: 56,  h: 56  };
    window.parent?.postMessage(payload, PARENT_ORIGIN);
  }, [open]);

  return (
    <div style={{ height: "100vh", margin: 0, background: "transparent" }}>
      <CopilotKit runtimeUrl="/api/copilotkit">
        <CopilotPopup open={open} onOpenChange={setOpen} title="Copilot" />
      </CopilotKit>
    </div>
  );
}





// subapp-next/app/embed/layout.tsx
export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body style={{ margin: 0, height: "100vh", background: "transparent" }}>
        {children}
      </body>
    </html>
  );
}